import{_ as a,D as n,o,c as p,G as l,V as t}from"./chunks/framework.ab6d8354.js";const h=JSON.parse('{"title":"JS之prototype","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/front-base/2023-05-16-js-prototype.md","filePath":"blogs/front-base/2023-05-16-js-prototype.md","lastUpdated":1684998501000}'),e={name:"blogs/front-base/2023-05-16-js-prototype.md"},c=t(`<h1 id="js之prototype" tabindex="-1">JS之prototype <a class="header-anchor" href="#js之prototype" aria-label="Permalink to &quot;JS之prototype&quot;">​</a></h1><h2 id="什么是prototype" tabindex="-1">什么是prototype <a class="header-anchor" href="#什么是prototype" aria-label="Permalink to &quot;什么是prototype&quot;">​</a></h2><p>JavaScript中的对象有一个特殊的<code>Prototype</code>内置属性，其实就是对其他对象的引用，几乎所有的对象在创建时<code>Prototype</code>属性都会被赋予一个非空的值。</p><p>请看</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> myObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(myObj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a) </span><span style="color:#676E95;font-style:italic;">// 2</span></span></code></pre></div><p>显而易见，myObj这个对象里面有一个属性是a，它被赋予的值为2，所以我们console.log(myObj.a)的时候就能找到它。</p><p>但是，请再看</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> myObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> another </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//将myObj关联到another上</span></span>
<span class="line"><span style="color:#A6ACCD;">myObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(another)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(myObj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a) </span><span style="color:#676E95;font-style:italic;">// 2</span></span></code></pre></div><p>显然，myObj里并没有属性a，但是为什么myObj.a仍然能够输出2呢？这就是<strong>原型链</strong>。如果对象无法在它自身找到所需要访问的属性，就会继续访问对象的<code>Prototype</code>链。</p><h2 id="为什么需要原型链" tabindex="-1">为什么需要原型链 <a class="header-anchor" href="#为什么需要原型链" aria-label="Permalink to &quot;为什么需要原型链&quot;">​</a></h2><p>准确的来说，我认为JavaScript是一个真正面向<strong>对象</strong>的语言，其他类似于C++，java实际上都是面向<strong>类</strong>。 为什么呢？在java中，我们可以通过建立一个类来构造对象，类和类之间可以继承，从而实现一些实例之间的关联。然而，在JavaScript中<strong>并没有类</strong>，它只有对象，那怎么样才能实现像java那样实例之间的关联呢？就是通过<strong>Prototype</strong>，用对象构造对象。</p><h2 id="怎样模仿-类" tabindex="-1">怎样模仿‘类’ <a class="header-anchor" href="#怎样模仿-类" aria-label="Permalink to &quot;怎样模仿‘类’&quot;">​</a></h2><p>JavaScript函数中有一个这样的特殊特性：<strong>所有的函数默认都会拥有一个名为prototype的共有且不可枚举的属性，它会指向另一个对象</strong>。 是什么意思呢，可能这样说会好懂一点：<strong>函数都会拥有一个原型对象，通过 函数名.prototype 去引用它</strong>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#676E95;font-style:italic;">// {}</span></span></code></pre></div><p>可是这和类又有什么关系呢，我们常常会见到这样的代码</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> m </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><p>我们在调用new Foo的时候，实际上会创建一个新对象，并将这个新对象的<code>prototype</code>链接到Foo的原型对象上（也就是Foo.prototype所指向的对象）。 在面向类的语言中，类可以被实例化多次（创建多个实例化对象），就像用模具制作东西一样，一个类的实例化就意味着把类的属性和行为复制到一个具体的物理对象中，但是在JavaScript中并没有类，你只能创建多个对象，然后把这些对象的<code>prototype</code>链链接（或者说关联）到同一个对象中，就这样间接地实现类机制。</p>`,17);function r(y,i,D,F,C,A){const s=n("git-talk");return o(),p("div",null,[c,l(s)])}const g=a(e,[["render",r]]);export{h as __pageData,g as default};
