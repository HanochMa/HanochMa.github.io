import{_ as a,o as s,c as n,V as e}from"./chunks/framework.0433447c.js";const A=JSON.parse('{"title":"深入浅出PNPM","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/2023-05-11-pnpm.md","lastUpdated":1684143964000}'),p={name:"blogs/2023-05-11-pnpm.md"},o=e(`<h1 id="深入浅出pnpm" tabindex="-1">深入浅出PNPM <a class="header-anchor" href="#深入浅出pnpm" aria-label="Permalink to &quot;深入浅出PNPM&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p><code>pnpm</code>是一款当代备受关注的 <strong>新兴(问题较多)</strong> 包管理工具，使用过的同学们都会被它极快的安装速度、极少的磁盘存储空间所吸引。</p><p>首先，为什么会出现<code>pnpm</code>？作者一开始对<code>yarn</code>的发布有很高的期待，但是发布后并没有满足作者的一些期待，反而让作者有些失望。</p><blockquote><p>After a few days, I realized that Yarn is just a small improvement over npm. Although it makes installations faster and it has some nice new features, it uses the same flat <em>node_modules</em> structure that npm does (since version 3). And flattened dependency trees come with a bunch of issues 几天后，我意识到 Yarn 只是对 npm 的一个小小的改进。尽管它使安装速度更快，并且具有一些不错的新功能，但它使用与npm相同的平面<em>node_modules</em>结构（自版本 3 起）。<code>扁平化的依赖树带来了一系列问题</code>(具体后面会讲)</p></blockquote><p>至于为什么叫<code>pnpm</code>？是因为<code>pnpm</code>作者对现有的包管理工具，尤其是<code>npm</code>和<code>yarn</code>的性能特别失望，所以起名叫做<code>performance npm</code>，即<code>pnpm</code>（高性能npm）。那么它的性能高在哪里，对比<code>npm</code>和<code>yarn</code>又有哪些优势呢？下面我们先来聊聊<code>npm</code>和<code>yarn</code>存在的一些问题。</p><h2 id="npm" tabindex="-1">NPM <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;NPM&quot;">​</a></h2><p>在 <em>npm@3</em> 之前，<em>node_modules</em>结构是<code>干净</code>、<code>可预测</code>的，因为node_modules 中的<strong>每个依赖项</strong>都有自己的<em>node_modules</em>文件夹，在<em>package.json中</em>指定了所有依赖项。例如下面所示，项目依赖了<code>foo</code>，<code>foo</code>又依赖了<code>bar</code>，依赖关系如下图所示：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">└─ foo</span></span>
<span class="line"><span style="color:#A6ACCD;">   ├─ index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#A6ACCD;">   ├─ package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json</span></span>
<span class="line"><span style="color:#A6ACCD;">   └─ node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">      └─ bar</span></span>
<span class="line"><span style="color:#A6ACCD;">         ├─ index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#A6ACCD;">         └─ package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><p>上面结构有两个严重的问题：</p><ul><li>package中经常创建太深的依赖树，这会导致 Windows 上的目录路径过长问题</li><li>当一个package在不同的依赖项中需要时，它会被多次复制粘贴并生成多份文件</li></ul><p>为了解决这些问题，npm@3之后的版本采取<strong>依赖平铺</strong>的策略，把所有的依赖（包括依赖的依赖）平铺到<em>node_modules</em>文件夹下，像这样：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ foo</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">  ├─ index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">  └─ package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json</span></span>
<span class="line"><span style="color:#A6ACCD;">└─ bar</span></span>
<span class="line"><span style="color:#A6ACCD;">   ├─ index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#A6ACCD;">   └─ package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><p>可以看到，<strong>依赖平铺</strong>机制下，<code>bar</code>被提升到了顶层。如果同一个包的多个版本在项目中被依赖时，node_modules结构又是怎么样的？</p><p>例如：一个项目<code>App</code>直接依赖了<code>A（version: 1.0）</code>和<code>C（version: 1.0）</code>，<code>A</code>和<code>C</code>都依赖了不同版本的<code>B</code>，其中<code>A</code>依赖<code>B 1.0</code>，<code>C</code>依赖<code>B 2.0</code>,可以通过下图清晰的看到<code>npm2</code>和<code>npm3+</code>结构差异：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66612d54fac34ced8367b2a42f854efc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt="image.png"></p><p>包<code>B 1.0</code>被提升到了顶层，这里需要注意的是，多个版本的包<code>只能有一个</code>被提升上来，其余版本的包会嵌套安装到<strong>各自的依赖当中</strong>（类似<code>npm2</code>的结构）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ebfdd76c31e47cca8a10a881b464e60~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt="image.png"></p><blockquote><p>至于哪个版本的包被提升，依赖于包的安装顺序，谁最后安装就提升谁 ！</p></blockquote><p>依赖变更会影响提升的<strong>版本号</strong>，比如变更后，有可能是<code>B 1.0</code> ，也有可能是 <code>B 2.0</code>被提升上来（但只能有一个版本提升）</p><p>细心的小伙伴可能发现，这其实并没有解决之前的问题，反而又引入了许多新的问题。</p><h2 id="npm3-和yarn存在的问题" tabindex="-1">npm3+和yarn存在的问题 <a class="header-anchor" href="#npm3-和yarn存在的问题" aria-label="Permalink to &quot;npm3+和yarn存在的问题&quot;">​</a></h2><h3 id="幽灵依赖-phantom-dependencies" tabindex="-1">幽灵依赖（Phantom dependencies ） <a class="header-anchor" href="#幽灵依赖-phantom-dependencies" aria-label="Permalink to &quot;幽灵依赖（Phantom dependencies ）&quot;">​</a></h3><p><strong>Phantom dependencies</strong> 被称之为<strong>幽灵依赖</strong>或<strong>幻影依赖</strong>，解释起来很简单，即某个包没有在<code>package.json</code> 被依赖，但是用户却能够引用到这个包。</p><p>引发这个现象的原因一般是因为 node_modules 结构所导致的。例如使用 npm或yarn 对项目安装依赖，依赖里面有个依赖叫做 <code>foo</code>，<code>foo</code> 这个依赖同时依赖了 <code>bar</code>，yarn 会对安装的 node_modules 做一个扁平化结构的处理，会把依赖在 node_modules 下打平，这样相当于 <code>foo</code> 和 <code>bar</code> 出现在同一层级下面。那么根据 nodejs 的寻径原理，用户能 require 到 <code>foo</code>，同样也能 require 到 <code>bar</code>。</p><blockquote><p>nodejs的寻址方式：(<a href="https://link.juejin.cn?target=https%3A%2F%2Fnodejs.org%2Fapi%2Fmodules.html%23loading-from-node_modules-folders" target="_blank" rel="noreferrer">查看更多</a>)</p><ol><li>对于核心模块（core module） =&gt; 绝对路径 寻址</li><li>node标准库 =&gt; 相对路径寻址</li><li>第三方库（通过npm安装）到node_modules下的库（可以在node环境中输入<code>module.paths</code>查看）： 3.1. 先在当前路径下，寻找 currentProject/node_modules/xxx 3.2 递归从下往上，到上级路径寻找，例如 ../node_modules/xxx 3.3 循环步骤3.2 3.4 在全局环境路径下寻找，例如 .node_modules/xxx 3.5 在用户目录下寻找，例如 users/金虹桥程序员/.node_modules/xxx 或者 users/金虹桥程序员/node_libraries/xxx 3.6 node安装目录下查找，例如 nodejs/lib/node/.node_modules/xxx</li></ol></blockquote><h3 id="npm分身-npm-doppelgangers" tabindex="-1">NPM分身（NPM doppelgangers ） <a class="header-anchor" href="#npm分身-npm-doppelgangers" aria-label="Permalink to &quot;NPM分身（NPM doppelgangers ）&quot;">​</a></h3><p>这个问题其实也可以说是 <code>提升</code> 导致的，这个问题可能会导致有大量的依赖的被重复安装.</p><p>举个例子：项目中有<code>packageA</code>、<code>packageB</code>、<code>packageC</code>、<code>packageD</code>。<code>packageA</code>依赖package<strong>X 1.0</strong>和package<strong>Y 1.0</strong>，<code>packageB</code>依赖package<strong>X 2.0</strong>和package<strong>Y 2.0</strong>，<code>packageC</code>依赖package<strong>X 1.0</strong>和package<strong>Y 2.0</strong>，<code>packageD</code>依赖package<strong>X 2.0</strong>和package<strong>Y 1.0</strong>。</p><p>在<strong>npm2</strong>时，结构如下</p><div class="language-markdown"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> package A</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> packageX 1.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> packageY 1.0</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> package B</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> packageX 2.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> packageY 2.0</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> package C</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> packageX 1.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> packageY 2.0</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> package D</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> packageX 2.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> packageY 1.0</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><p>在<strong>npm3+**和**yarn</strong>中，由于存在<code>提升</code>机制，所以X和Y各有一个版本被提升了上来，目录结构如下</p><div class="language-markdown"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> package X =&gt; 1.0版本</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> package Y =&gt; 1.0版本</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> package A</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> package B</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> packageX 2.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> packageY 2.0</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> package C</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> packageY 2.0</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> package D</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> packageX 2.0</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><p>如上图所示的packageX 2.0和packageY 2.0被重复安装多次，从而造成 npm 和 yarn 的性能一些性能损失。</p><p>这种场景在monorepo 多包场景下尤其明显，这也是<code>yarn workspace</code>经常被吐槽的点，另外扁平化的算法实现也相当复杂，改动成本很高。 那么<code>pnpm</code>是如何解决这种问题的呢？</p><h2 id="网状-平铺的node-modules结构" tabindex="-1">网状 + 平铺的node_modules结构 <a class="header-anchor" href="#网状-平铺的node-modules结构" aria-label="Permalink to &quot;网状 + 平铺的node_modules结构&quot;">​</a></h2><p>回想下 npm3 和 yarn 为什么要做 node_modules 扁平化？不就是因为同样的依赖会复制多次，并且路径过长在 windows 下有问题么？</p><p>那如果不复制呢，比如通过 link，接下来先介绍下 link，也就是软硬连接，这是操作系统提供的机制。</p><h3 id="硬链接-hard-link" tabindex="-1">硬链接（hard link） <a class="header-anchor" href="#硬链接-hard-link" aria-label="Permalink to &quot;硬链接（hard link）&quot;">​</a></h3><p>硬链接可以理解为<strong>同一个文件的不同引用</strong>，怎么说呢？就是我们通过文件路径a/b/c去访问存储在磁盘上的某个文件时，操作系统会通过一系列的寻址操作读取到这个文件内容，然而操作系统允许我们通过不同的路径去访问。</p><p>举个例子，我们的文件存储在磁盘的A扇区，我们可以通过建立多个硬链接的方式来访问，a/b/c这个路径能访问到，d/e/f这个路径也能访问到，这两个路径就成为文件的硬链接。</p><h3 id="软连接-symbolic-link" tabindex="-1">软连接（symbolic link） <a class="header-anchor" href="#软连接-symbolic-link" aria-label="Permalink to &quot;软连接（symbolic link）&quot;">​</a></h3><p>软链接则是新建一个文件，文件内容指向另一个路径，类似操作系统上的快捷方式和咱们js中对象的存储方式。</p><p>可以理解为<strong>文件中只是存储另外一个文件的路径，通过这个去访问文件内容</strong>。</p><h3 id="pnpm是如何利用软硬链接的" tabindex="-1">pnpm是如何利用软硬链接的 <a class="header-anchor" href="#pnpm是如何利用软硬链接的" aria-label="Permalink to &quot;pnpm是如何利用软硬链接的&quot;">​</a></h3><p>回到上文，为了解决依赖安装多次&amp;文件路径过长的问题，pnpm的解决思路是<strong>不复制文件，只在全局仓库保存一份 npm 包的内容，其余的地方都 link 过去</strong></p><p>这样不会有复制多次的磁盘空间浪费，而且也不会有路径过长的问题。因为路径过长的限制本质上是不能有太深的目录层级，现在都是各个位置的目录的 link，并不是同一个目录，所以也不会有长度限制。</p><p>再把 node_modules 删掉，然后用 pnpm 重新装一遍，执行 pnpm install。</p><p>你会发现它打印了这样一句话：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b2d51d9a17743a4bafc42f1bbfd310c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="img"></p><p>包是从全局 store 硬连接到虚拟 store 的，这里的虚拟 store 就是 node_modules/.pnpm。</p><p>我们打开 node_modules 看一下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b4dc807ca6e4ae7a955c8dd6385cb46~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="img"></p><p>确实不是扁平化的了，依赖了 express，那 node_modules 下就只有 express，没有幽灵依赖。</p><p>展开 .pnpm 看一下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65a69589bd534fdd97bdbeb6e3e1024c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="img"></p><p><strong>所有的依赖都在这里铺平了，都是从全局 store 硬连接过来的，然后包和包之间的引用关系是通过软链接组织的</strong>。</p><p>比如 .pnpm 下的 expresss，这些都是软链接，</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c50d8dc8a2a4466ba9e5eccd5c15614e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="img"></p><p>也就是说，所有的依赖都是从全局 store 硬连接到了 node_modules/.pnpm 下，然后之间通过软链接来相互引用。</p><h3 id="原理图解" tabindex="-1">原理图解 <a class="header-anchor" href="#原理图解" aria-label="Permalink to &quot;原理图解&quot;">​</a></h3><p>如果还是看的不太清晰，下面结合官方的一张原理图，配合着看一下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/326a2090786e4d16b2d6fce25e876680~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="img"></p><p>这就是 pnpm 的实现原理。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>那么回过头来看一下，pnpm 为什么优秀呢？</p><p>首先，最大的优点是节省磁盘空间呀，一个包全局只保存一份，剩下的都是软硬连接，这得节省多少磁盘空间呀。</p><p>其次就是快，因为通过链接的方式而不是复制，自然会快。</p><p>这也是它所标榜的优点：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ba8815b36b3498ea4a3c2248d192bd6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="img"></p><p>相比 npm2 的优点就是不会进行同样依赖的多次复制。</p><p>相比 yarn 和 npm3+ 呢，那就是没有幽灵依赖，也不会有没有被提升的依赖依然复制多份的问题。</p><p><strong>这就已经足够优秀了。</strong></p>`,73),l=[o];function c(t,r,d,i,m,g){return s(),n("div",null,l)}const D=a(p,[["render",c]]);export{A as __pageData,D as default};
