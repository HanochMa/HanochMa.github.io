import{_ as e,o as r,c as t,V as o}from"./chunks/framework.0433447c.js";const u=JSON.parse('{"title":"如何做一个有质量的技术分享","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/2023-05-15-tech-share.md","lastUpdated":1684144723000}'),a={name:"blogs/2023-05-15-tech-share.md"},l=o('<h1 id="如何做一个有质量的技术分享" tabindex="-1">如何做一个有质量的技术分享 <a class="header-anchor" href="#如何做一个有质量的技术分享" aria-label="Permalink to &quot;如何做一个有质量的技术分享&quot;">​</a></h1><p>分享信息并不难，大多数人都能做到，就算是不善言谈性格内向的技术人员，通过博客或社交媒体，或是不正式的交流，他们都能或多或少的做到。但是如果你想要做一个有质量有高度的分享，这个就难了，所谓的有质量和有高度，我心里面的定义有两点：</p><ol><li><p>分享内容的保鲜期是很长的</p></li><li><p>会被大范围的传递</p></li></ol><p>首先，我们先扪心自问一下，我们自己觉得读到的好的技术文章是什么？我不知道大家的是什么，我个人认为的好的文章是下面这样的：</p><ul><li><strong>把复杂的问题讲解的很简单也很清楚</strong>。比如我高中时期读到这本1978年出版的《<a href="https://book.douban.com/subject/1441922/" target="_blank" rel="noreferrer">从一到无穷大</a>》，用各种简单通俗通懂的话把各种复杂的科学知识讲的清清楚楚。还有看过的几本很好的书，有一本是《<a href="https://book.douban.com/subject/5273955/" target="_blank" rel="noreferrer">Windows程序设计</a>》，从一个hello world的程序开始一步一步教你Windows下的原生态编程。</li><li><strong>有各种各样的推导和方案的比较，让你知其然知其所以然</strong>。有了不同方案的比较，才可能让人有全面的认识。这个方面的经典作著是《<a href="https://book.douban.com/subject/5387403/" target="_blank" rel="noreferrer">Effective C++</a>》。</li><li><strong>原理、为什么、思路、方法论会让人一通百通</strong>。这里面最经典的恐怕就是《<a href="https://book.douban.com/subject/5387403/" target="_blank" rel="noreferrer">十万个为什么</a>》了，在计算机方面也有几本经典书，有《<a href="https://book.douban.com/subject/1467587/" target="_blank" rel="noreferrer">Unix编程艺术</a>》、《<a href="https://book.douban.com/subject/1052241/" target="_blank" rel="noreferrer">设计模式</a>》、《<a href="https://book.douban.com/subject/1230413/" target="_blank" rel="noreferrer">深入理解计算机系统</a>》等书，以及《<a href="http://www.kegel.com/c10k.html" target="_blank" rel="noreferrer">The C10K Problem</a>》等很多技术论文。</li></ul><p>其实，从教科书，到专业书，再到论文，都有上面这些不错的特质。</p><p>所以，如果你想做一个好的技术分享的话，下面是我总结出来的方法，供你参考。</p><ul><li><p><strong>先描述好一个问题</strong>。这样能够听众带入进来，如果这个问题是他们感同身受的，那是最好了。千万不要一上来就说What，或是直接冲进答案里。这样的分享是在灌输和填鸭。把Why说清楚。没有Why，直接谈What的技术分享，通常来说价值不大。</p></li><li><p><strong>How比What重要</strong></p><p>。在讲How的时候，也就是如何解这个问题。</p><ul><li>先要把问题模型说清楚，有了问题模型这个框框后，方案才有意义。</li><li>然后要有不同技术的比较。有了比较后，听众才会更相信你。</li><li>直接上What的技术细节，其实没有太大意义。</li></ul></li><li><p><strong>一定要有Best Practice或方法论总结</strong>，否则上不了档次的。也就是分享中大家可以得到的重要收获。</p></li></ul><p>说明了这个模型就是：<strong>问题 –&gt; 方案 –&gt; 总结。这其中是有一定的心理学模型的，具体表现如下：</strong></p><ul><li>用问题来吸引受众，带着受众来一起思考</li><li>用问题模型来框住受众的思考范围，让受众聚焦</li><li>给出几种不同的解决方案，比较他们的优缺点，让受众有一种解决问题的参与感。</li><li>最后，给出最佳实践，方法论或套路，因为有了前三步的铺垫，受众欣然接受。</li><li>整个过程会让受众有强烈的成长感和收获感。</li></ul><p>本文转自大佬<a href="https://coolshell.cn/" target="_blank" rel="noreferrer"><strong>左耳朵耗子博客</strong></a></p>',11),n=[l];function s(i,c,p,h,_,b){return r(),t("div",null,n)}const f=e(a,[["render",s]]);export{u as __pageData,f as default};
