import{_ as s,o as a,c as n,V as l}from"./chunks/framework.0433447c.js";const d=JSON.parse('{"title":"Git常用命令","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/2022-05-07-git.md","lastUpdated":1684144723000}'),p={name:"blogs/2022-05-07-git.md"},t=l(`<h1 id="git常用命令" tabindex="-1">Git常用命令 <a class="header-anchor" href="#git常用命令" aria-label="Permalink to &quot;Git常用命令&quot;">​</a></h1><p>平常在windows电脑上使用Git Extensions 工具比较多，大部分的常用指令都可以通过点点点就可以完成。在mac电脑上的话使用sourcetree工具。但有时候也会直接通过git命令，很多时候也是通过百度来临时查阅，所以总结下来方便自己，也方便可能需要的你。</p><h2 id="_1、基本命令" tabindex="-1">1、基本命令 <a class="header-anchor" href="#_1、基本命令" aria-label="Permalink to &quot;1、基本命令&quot;">​</a></h2><ul><li>1.1、 生成SSH公钥和私钥，公钥要复制配置到git服务器上,可通过Git Bash Here打开终端命令，前提需要安装git<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 查看ssh版本,同时判断ssh是否已经安装，安装git即可</span></span>
<span class="line"><span style="color:#A6ACCD;">ssh </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">V</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 生成SSH密钥</span></span>
<span class="line"><span style="color:#A6ACCD;">ssh</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">keygen </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">o</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 导航到指定目录</span></span>
<span class="line"><span style="color:#A6ACCD;">cd </span><span style="color:#89DDFF;">~</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">.ssh</span><span style="color:#89DDFF;">/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 查看ssh,id_rsa.pub则为公钥，id_rsa则为私钥，将公钥复制到git服务器</span></span>
<span class="line"><span style="color:#A6ACCD;">ls</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// mac下可以用cat命令进行查看 .pub后缀名为公钥，另外一个为私钥,将公钥复制到服务器或者github或者code.aliyun.com上</span></span>
<span class="line"><span style="color:#A6ACCD;">cat </span><span style="color:#89DDFF;">~/.</span><span style="color:#A6ACCD;">ssh</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">id_rsa</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pub</span></span></code></pre></div></li><li>1.2、 git config 配置提交用户名和用户邮箱<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git config </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">global user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HanochMa</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">git config </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">global user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">email </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HanochMa@163.com</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 配置好后可通过这个来查看</span></span>
<span class="line"><span style="color:#A6ACCD;">git config </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">l</span></span></code></pre></div></li><li>1.3、 创建项目后如何提交到仓库<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建项目后到指定的项目文件夹中初始化git</span></span>
<span class="line"><span style="color:#A6ACCD;">git init</span></span></code></pre></div></li><li>1.4、 将文件添加到暂存区<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 将添加或修改的文件提交到暂存区</span></span>
<span class="line"><span style="color:#A6ACCD;">git add </span><span style="color:#89DDFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将监控已经被add进暂存区的文件，会将被修改的文件再次提交到暂存区</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 或者是</span></span>
<span class="line"><span style="color:#A6ACCD;">git add </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">u</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 则是git add .和 git add -u 两个命令的集合</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 或者是</span></span>
<span class="line"><span style="color:#A6ACCD;">git add </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">A</span></span></code></pre></div></li><li>1.5、 提交到本地仓库（即自己当前电脑的代码仓库）<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 提交到本地仓库</span></span>
<span class="line"><span style="color:#A6ACCD;">git commit </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">m </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> feat: 初始化项目</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div></li><li>1.6、 设置远程仓库地址（即代码要提交到哪里的服务器）<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 当然也可以使用ssh 链接</span></span>
<span class="line"><span style="color:#A6ACCD;">git remote add github</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">origin </span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//github.com/HanochMa/demo.git</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 移除远程仓库，默认名称为origin</span></span>
<span class="line"><span style="color:#A6ACCD;">git remote rm origin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 重新设置远程仓库url</span></span>
<span class="line"><span style="color:#A6ACCD;">git remote set</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">url origin git@github</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">com:HanochMa</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">qiankun</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">git</span></span></code></pre></div></li><li>1.7、 推送到远程服务器（注意一点，首次推送要设置追踪）<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 设置本地分支追踪远程分支、、、之后就可以直接git push</span></span>
<span class="line"><span style="color:#A6ACCD;">git push </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">set</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">upstream origin main</span></span></code></pre></div></li><li>1.8、 修改文件名会忽略大小写，默认都是忽略了，所以修改文件名大小写是无效的<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// （查看是否忽略大小写） true则设置了忽略</span></span>
<span class="line"><span style="color:#A6ACCD;">git config core</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ignorecase</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 后面加上false则直接可设置不忽略，修改文件名大小写后会生效</span></span>
<span class="line"><span style="color:#A6ACCD;">git config core</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ignorecase </span><span style="color:#FF9CAC;">false</span></span></code></pre></div></li><li>1.9、修改文件夹名字大小写的问题<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// (修改前先将Test文件夹备份并修改为TestTemp&lt;一个临时文件夹名字而已&gt;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 然后执行命令</span></span>
<span class="line"><span style="color:#A6ACCD;">git rm Test</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 再将备份文件夹名字修改为需要的文件夹即可</span></span>
<span class="line"><span style="color:#89DDFF;">--------------</span><span style="color:#A6ACCD;">另外一种简单粗暴的方式</span><span style="color:#89DDFF;">-----------------</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 还是先备份好要删除的文件，然后将文件删除，提交到仓库。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 完事后将备份的文件复制回来，然后修改文件大小写，再提交即可。</span></span></code></pre></div></li><li>1.10、 是将远程主机的最新内容拉到本地 ,用户在检查了以后决定是否合并到工作本机分支中。<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git fetch</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//更多基本操作</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//https://www.cnblogs.com/runnerjack/p/9342362.html</span></span></code></pre></div></li><li>1.11、同样一个本地仓库可以设置多个远程仓库，然后通过不同的git push github.origin<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 设置个github远程仓库</span></span>
<span class="line"><span style="color:#A6ACCD;"> git remote add github</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">origin </span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//github.com/HanochMa/demo.git</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 设置个gitee远程仓库</span></span>
<span class="line"><span style="color:#A6ACCD;"> git remote add gitee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">origin </span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//github.com/HanochMa/demo.git</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 推送到github</span></span>
<span class="line"><span style="color:#A6ACCD;"> git push github</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">origin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">//  推送到gitee</span></span>
<span class="line"><span style="color:#A6ACCD;"> git push gitee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">origin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 移除远程仓库地址</span></span>
<span class="line"><span style="color:#A6ACCD;"> git remote rm gitee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">origin</span></span></code></pre></div></li><li>1.12、克隆代码库<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 目前没指定分支，默认为master</span></span>
<span class="line"><span style="color:#A6ACCD;"> git clone </span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//github.com/HanochMa/demo.git</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 指定分支名称</span></span>
<span class="line"><span style="color:#A6ACCD;"> git clone </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">b dev  </span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//github.com/HanochMa/demo.git</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 克隆指定远程仓库下的指定分支(gitee.origin为git remote add 设置的别名)</span></span>
<span class="line"><span style="color:#A6ACCD;"> git clone gitee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">origin  main</span></span></code></pre></div></li><li>1.13、git add . 时 vscode中警告 warning: LF will be replaced by CRLF in src/index.js.<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git config </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">global core</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">autocrlf </span><span style="color:#FF9CAC;">false</span></span></code></pre></div></li><li>1.14、拉取远程分支代码到本地（拉取dev分支代码到本地的分支）<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git fetch origin dev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">git pull origin dev</span></span></code></pre></div></li><li>1.15、git log 详细操作 <ul><li><a href="https://www.cnblogs.com/lsgxeva/p/9485874.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/lsgxeva/p/9485874.html</a></li></ul></li></ul><h2 id="_2、分支管理" tabindex="-1">2、分支管理 <a class="header-anchor" href="#_2、分支管理" aria-label="Permalink to &quot;2、分支管理&quot;">​</a></h2><ul><li>2.1、 创建分支<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 切换到基础分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 根据 切换到的main分支，创建dev分支并切换到dev分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">b dev</span></span></code></pre></div></li><li>2.2、 查看分支<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 查看本地分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git branch</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 查看本地分支和远程分支，如果不存在需要git fetch一下</span></span>
<span class="line"><span style="color:#A6ACCD;">git branch </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">a </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 查看远程分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git branch </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">r</span></span></code></pre></div></li><li>2.3、 修改分支名称<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 修改当前本地分支的名称</span></span>
<span class="line"><span style="color:#A6ACCD;">git branch </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">m develop</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">lqm</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 也可以修改指定的分支  原分支名称  新分支名称</span></span>
<span class="line"><span style="color:#A6ACCD;">git branch </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">m develop</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">lam develop</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">lqm</span></span></code></pre></div></li><li>2.4、 删除本地分支和删除远程分支<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 先切换到其他分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout dev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 删除本地分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git branch </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">d dev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果删除不了，可以进行强制删除</span></span>
<span class="line"><span style="color:#A6ACCD;">git branch </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">D dev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 有必要的情况下，删除远程分支但是要谨慎使用</span></span>
<span class="line"><span style="color:#A6ACCD;">git push origin </span><span style="color:#89DDFF;">--delete</span><span style="color:#A6ACCD;"> dev</span></span></code></pre></div></li></ul><h2 id="_3、合并代码" tabindex="-1">3、合并代码 <a class="header-anchor" href="#_3、合并代码" aria-label="Permalink to &quot;3、合并代码&quot;">​</a></h2><ul><li>3.1、 将某个提交，任何跟仓库所有分支的commit 合并到当前分支<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// (正常情况直接合并成功，可能存在重复图需要手动解决)</span></span>
<span class="line"><span style="color:#A6ACCD;">git cherry</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">pick  commitid</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// git多个commitid</span></span>
<span class="line"><span style="color:#A6ACCD;">git cherry</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">pick  commitid commitid1 commitid2 commitid3</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 正常情况直接push即可，手动解决冲突需要commit 再进行push</span></span>
<span class="line"><span style="color:#A6ACCD;">git push</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 扩展阅读：还可以一起提交commitid-A到commitid-B 之间所有的内容修改</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html</span></span></code></pre></div></li><li>3.2、 当前分支dev的代码提交push成功，此时想合并到main分支上<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 先切换到main分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将dev分支的变更拉取到main分支上来</span></span>
<span class="line"><span style="color:#A6ACCD;">git merge dev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 合并完成，即可推送到远程服务器</span></span>
<span class="line"><span style="color:#A6ACCD;">git push </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">u origin main</span></span></code></pre></div></li></ul><h2 id="_4、tag标签-根据tag标签创建的分支不要与标签名一致" tabindex="-1">4、tag标签(根据tag标签创建的分支不要与标签名一致) <a class="header-anchor" href="#_4、tag标签-根据tag标签创建的分支不要与标签名一致" aria-label="Permalink to &quot;4、tag标签(根据tag标签创建的分支不要与标签名一致)&quot;">​</a></h2><ul><li>4.1、添加一个tag，并推送到远程仓库<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git tag </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">a </span><span style="color:#F78C6C;">3.11</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">3.001</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">m </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">release 3.11.3.001</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">git push origin </span><span style="color:#F78C6C;">3.11</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">3.001</span></span></code></pre></div></li><li>4.2、 删除一个tag<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git tag </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">d </span><span style="color:#F78C6C;">3.11</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">3.001</span></span>
<span class="line"><span style="color:#A6ACCD;">git push </span><span style="color:#FFCB6B;">origin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">refs</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">tags</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">3.11</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">3.001</span></span></code></pre></div></li><li>4.3、 查看tag<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git tag</span></span></code></pre></div></li><li>4.4、在某个commit上打tag<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git tag test_tag c809ddbf83939a89659e51dc2a5fe183af384233　　　　</span></span>
<span class="line"><span style="color:#A6ACCD;">git push origin test_tag　　　　</span><span style="color:#676E95;font-style:italic;">//!!!本地tag推送到线上</span></span></code></pre></div></li><li>4.5、 根据tag创建分支<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//www.cnblogs.com/senlinyang/p/9455426.html</span></span>
<span class="line"><span style="color:#A6ACCD;">git branch newbranch </span><span style="color:#F78C6C;">3.11</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">3.001</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 切换到分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout newbranch</span></span></code></pre></div></li><li>4.6、删除已经push到服务器的提交记录，到某个commitid<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、找到想要退回到的那个commitid</span></span>
<span class="line"><span style="color:#A6ACCD;">git log </span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、然后将代码退回到那个commitid</span></span>
<span class="line"><span style="color:#A6ACCD;">git reset </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">hard commitid</span></span>
<span class="line"><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">、推送到服务器，已经要加上</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">force</span></span>
<span class="line"><span style="color:#A6ACCD;">git push origin </span><span style="color:#FFCB6B;">HEAD</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">dev </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">force</span></span></code></pre></div></li><li>4.7、删除没有push到远程服务器的commit记录<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、通过找到想要退回到的commit_id</span></span>
<span class="line"><span style="color:#A6ACCD;">git log </span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、本地代码会变成你想要的那次代码。这次之后提交的代码都没有了</span></span>
<span class="line"><span style="color:#A6ACCD;">git reset </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">hard id </span></span>
<span class="line"><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">、完成撤销，停留在当前版本，之前的代码还是在的。只是本地的提交记录没了</span></span>
<span class="line"><span style="color:#A6ACCD;">git reset id</span></span></code></pre></div></li></ul><h2 id="_5、小技巧" tabindex="-1">5、小技巧 <a class="header-anchor" href="#_5、小技巧" aria-label="Permalink to &quot;5、小技巧&quot;">​</a></h2><ul><li><p>5.1、vscode中配置git bash 作为命令行</p><ul><li><a href="https://zhuanlan.zhihu.com/p/365625019" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/365625019</a></li></ul></li><li><p>5.2、在某个分支暂存某些临时代码（不方便提交的）</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 将当前代码状态暂时切换WIP</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash save </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">备注</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 执行后 Saved working directory and index state WIP on dev: b4d9dc5 feat: 合并行和列</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 想恢复的话需要切换到之前的分支，然后再执行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 应用最近一次的stash</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash apply   </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 应用指定stash, 先list</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash apply  stash@</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//apply后，list中还会存在</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 或者 pop</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash pop stash@</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// pop后，list中不会存在</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//如果stash了多次,可通过list命令列出所有的stash</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash list </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果都恢复完毕 可以使用clear进行清除</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash clear</span></span></code></pre></div></li><li><p>5.3、恢复commit提交 // <a href="https://mp.weixin.qq.com/s/LDxXR302F9G35x3uwHh0jg" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/LDxXR302F9G35x3uwHh0jg</a></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 最近一次的</span></span>
<span class="line"><span style="color:#A6ACCD;">git reset </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">soft HEAD</span><span style="color:#89DDFF;">^</span></span>
<span class="line"><span style="color:#A6ACCD;">git log </span><span style="color:#676E95;font-style:italic;">//通过查看日志可以发现，已经commit，但没有push的代码已经返回到本地更改中， 而且git log中不会留下记录</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 指定commitid的提交（最近一次的提交到指定的commitid） 所有更改</span></span>
<span class="line"><span style="color:#A6ACCD;">git reset </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">soft commitid</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//如果没有push到远程服务器，直接push即可</span></span>
<span class="line"><span style="color:#A6ACCD;">git push</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果已经push到远程服务器，因为服务器与本地存在差异</span></span>
<span class="line"><span style="color:#A6ACCD;">git push </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">f</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 直接重置到commitid  一般慎用</span></span>
<span class="line"><span style="color:#A6ACCD;">git reset </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">hard commitid</span></span></code></pre></div></li></ul><h2 id="_6、合并代码" tabindex="-1">6、合并代码 <a class="header-anchor" href="#_6、合并代码" aria-label="Permalink to &quot;6、合并代码&quot;">​</a></h2><ul><li>6.1、将远程分支代码合并到本地<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 先拉去远程分支代码，确保dev代码师最新的</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout dev </span></span>
<span class="line"><span style="color:#A6ACCD;">git pull</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 切换到自己的代码分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git chekout dev</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">lqm</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 执行将dev分支代码合并到dev-lqm</span></span>
<span class="line"><span style="color:#A6ACCD;">git merge dev</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 推送代码到自己的远程分支上</span></span>
<span class="line"><span style="color:#A6ACCD;">git push</span></span></code></pre></div></li><li>6.2、git subtree <ul><li><a href="https://juejin.cn/post/7018344866811740173" target="_blank" rel="noreferrer">https://juejin.cn/post/7018344866811740173</a></li><li><a href="https://segmentfault.com/a/1190000003969060" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000003969060</a></li></ul></li></ul><h2 id="_7、回滚-回退" tabindex="-1">7、回滚&amp;回退 <a class="header-anchor" href="#_7、回滚-回退" aria-label="Permalink to &quot;7、回滚&amp;回退&quot;">​</a></h2><h3 id="git-reset" tabindex="-1">git reset <a class="header-anchor" href="#git-reset" aria-label="Permalink to &quot;git reset&quot;">​</a></h3><p>A-&gt;B→C 丢失C 变成A→B，适用于C可能是瞎提交错了，必须reset</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git reset --hard &lt;commit id(可以只写前几位，不用写全)&gt; 回退到某个版本</span></span></code></pre></div><h3 id="git-revert" tabindex="-1">git revert <a class="header-anchor" href="#git-revert" aria-label="Permalink to &quot;git revert&quot;">​</a></h3><p>git revert <strong>回滚</strong>某个版本，注意不是回滚到某个版本 A-&gt;B→C 并没有丢失C 变成 A-&gt;B-&gt;C→B,适用于将来可能会改回来C</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git revert --hard &lt;commit id(可以只写前几位，不用写全)&gt; 回滚某个版本</span></span></code></pre></div><h2 id="_8、commit-message-规范" tabindex="-1">8、commit message 规范 <a class="header-anchor" href="#_8、commit-message-规范" aria-label="Permalink to &quot;8、commit message 规范&quot;">​</a></h2><p><strong>包含Header、Body、Footer部分</strong> &lt;type&gt;(&lt;scope&gt;):&lt;subject&gt; // 空一行 &lt;body&gt; // 空一行 &lt;footer&gt;</p><h3 id="header部分" tabindex="-1">Header部分 <a class="header-anchor" href="#header部分" aria-label="Permalink to &quot;Header部分&quot;">​</a></h3><ol><li><strong>type</strong> type用于说明 commit 的类别，只允许使用下面7个标识。 <ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul></li></ol><p>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</p><ol start="2"><li><p><strong>scope</strong> scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p></li><li><p><strong>subject</strong> subject是 commit 目的的简短描述，不超过50个字符。</p></li></ol><ul><li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li><li>第一个字母小写</li><li>结尾不加句号</li></ul><h2 id="_9、分支管理" tabindex="-1">9、分支管理 <a class="header-anchor" href="#_9、分支管理" aria-label="Permalink to &quot;9、分支管理&quot;">​</a></h2><p>最开始，head指向master，master指向最新的提交 <img src="https://github.com/HanochMa/PictureBed/raw/main/blogs/branch1.png" alt="branch1"> 创建分支dev，head指向dev，dev指向最新提交 <img src="https://github.com/HanochMa/PictureBed/raw/main/blogs/branch2.png" alt="branch2"> dev新提交一个版本，往前移动一步，head仍然指向dev，master不变 <img src="https://github.com/HanochMa/PictureBed/raw/main/blogs/branch3.png" alt="branch3"></p>`,30),e=[t];function o(c,i,r,y,C,g){return a(),n("div",null,e)}const A=s(p,[["render",o]]);export{d as __pageData,A as default};
