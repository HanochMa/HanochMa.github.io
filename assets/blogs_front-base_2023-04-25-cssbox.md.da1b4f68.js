import{_ as e,o as a,c as t,V as o}from"./chunks/framework.0433447c.js";const m=JSON.parse('{"title":"CSS盒模型","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/front-base/2023-04-25-cssbox.md","lastUpdated":1684404214000}'),r={name:"blogs/front-base/2023-04-25-cssbox.md"},n=o('<h1 id="css盒模型" tabindex="-1">CSS盒模型 <a class="header-anchor" href="#css盒模型" aria-label="Permalink to &quot;CSS盒模型&quot;">​</a></h1><h2 id="标准盒模型-content-box默认" tabindex="-1">标准盒模型（content-box默认） <a class="header-anchor" href="#标准盒模型-content-box默认" aria-label="Permalink to &quot;标准盒模型（content-box默认）&quot;">​</a></h2><p>width和height指的是<strong>content</strong>的宽高，增加padding和border不会改变content的尺寸，但是会增加元素框整体的尺寸</p><h2 id="ie盒模型-border-box" tabindex="-1">IE盒模型（border-box） <a class="header-anchor" href="#ie盒模型-border-box" aria-label="Permalink to &quot;IE盒模型（border-box）&quot;">​</a></h2><p>width和height指的是<strong>content+padding+border</strong>的宽高，增加padding和border会压缩content的尺寸，元素整体的尺寸不会变。 <img src="https://github.com/HanochMa/PictureBed/raw/main/blogs/cssbox1.png" alt="cssbox1"></p><h2 id="js如何设置-获取盒模型对应的宽高" tabindex="-1">JS如何设置/获取盒模型对应的宽高 <a class="header-anchor" href="#js如何设置-获取盒模型对应的宽高" aria-label="Permalink to &quot;JS如何设置/获取盒模型对应的宽高&quot;">​</a></h2><h3 id="方式1" tabindex="-1">方式1 <a class="header-anchor" href="#方式1" aria-label="Permalink to &quot;方式1&quot;">​</a></h3><p><code>element.style.width/height</code> 缺点：通过这种方式，只能获取行内样式，不能获取内嵌的样式和外链的样式</p><h3 id="方式2" tabindex="-1">方式2 <a class="header-anchor" href="#方式2" aria-label="Permalink to &quot;方式2&quot;">​</a></h3><p><code>window.getComputedStyle(element).width/height</code> 兼容chrome，火狐，通用方式</p><h3 id="方式3-ie独有" tabindex="-1">方式3(ie独有) <a class="header-anchor" href="#方式3-ie独有" aria-label="Permalink to &quot;方式3(ie独有)&quot;">​</a></h3><p><code>element.currentStyle.width/height</code></p><h3 id="方式4" tabindex="-1">方式4 <a class="header-anchor" href="#方式4" aria-label="Permalink to &quot;方式4&quot;">​</a></h3><p><code>element.getBoundingClientRect().width/height</code> 此 api 的作用是：获取一个元素的绝对位置。绝对位置是视窗 viewport 左上角的绝对位置。此 api 可以拿到四个属性：left、top、width、height。</p><h2 id="margin塌陷-margin重叠" tabindex="-1">margin塌陷/margin重叠 <a class="header-anchor" href="#margin塌陷-margin重叠" aria-label="Permalink to &quot;margin塌陷/margin重叠&quot;">​</a></h2><p>标准文档流中，竖直方向的margin不叠加，只取较大的值作为margin(水平方向的margin是可以叠加的，即水平方向没有塌陷现象)。</p><blockquote><p>PS：如果不在标准流，比如盒子都浮动了，那么两个盒子之间是没有margin重叠的现象的。 举个例子 <img src="https://github.com/HanochMa/PictureBed/raw/main/blogs/cssbox2.png" alt="cssbox2"> 竖直方向上兄弟元素间 以<strong>数值大</strong>的为准</p></blockquote><p><strong>margin这个属性，本质上描述的是兄弟和兄弟之间的距离； 最好不要用这个marign表达父子之间的距离。</strong></p><blockquote><p>如果要表达父子之间的距离，我们一定要善于使用父亲的padding，而不是儿子的margin。</p></blockquote><h2 id="bfc-边距重叠解决方案" tabindex="-1">BFC（边距重叠解决方案） <a class="header-anchor" href="#bfc-边距重叠解决方案" aria-label="Permalink to &quot;BFC（边距重叠解决方案）&quot;">​</a></h2><p>未完待续...</p>',21),i=[n];function h(s,c,d,l,b,g){return a(),t("div",null,i)}const u=e(r,[["render",h]]);export{m as __pageData,u as default};
